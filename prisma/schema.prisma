// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeId String?

  domains Domain[]

  campaign Campaign[]

  billing Billings?
}

model Domain {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  icon String

  chatBot   ChatBot?
  questions Questions[]

  contacts   Contact[]
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @db.Uuid
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId String?   @db.Uuid
}

model ChatBot {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatBotKitId    String
  welcomeMessage  String?
  conversationIds String[] @default([])
  icon            String?
  background      String?
  textColor       String?
  helpdesk        Boolean  @default(false)
  domain          Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId        String?  @unique @db.Uuid
}

model Billings {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan    Plans   @default(STANDARD)
  credits Int     @default(10)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String? @unique @db.Uuid
}

model Questions {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model DiscoveryResponses {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String
  answer    String?
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @db.Uuid
}

model Contact {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String? @unique

  conversationIds    String[]             @default([])
  discoveryResponses DiscoveryResponses[]

  booking Bookings[]

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model ChatMessage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       Role?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String?  @db.Uuid
  seen       Boolean  @default(false)
}

model Bookings {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime
  slot      String
  email     String
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?  @db.Uuid
  domainId  String?  @db.Uuid
  createdAt DateTime @default(now())
}

model Campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  customers String[]
  domain    Domain[]
  template  String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum Role {
  user
  assistant
}
