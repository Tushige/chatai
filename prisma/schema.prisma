// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domains Domain[]

  billing Billing?
}

model Domain {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  icon String

  chatBot   ChatBot?
  questions Questions[]

  campaigns     Campaign[]
  contacts      Contact[]
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?        @db.Uuid
  Booking       Booking[]
  conversations Conversation[]
}

model ChatBot {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatBotKitId    String
  welcomeMessage  String?
  conversationIds String[] @default([])
  icon            String?
  background      String?
  textColor       String?
  helpdesk        Boolean  @default(false)
  domainId        String?  @unique @db.Uuid
  domain          Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model Plan {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  emailLimit  Int
  domainLimit Int
  Billing     Billing[]
}

model Billing {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  stripeCustomerId String?
  plan             Plan    @relation(fields: [planId], references: [id])
  planId           String  @db.Uuid

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
}

model Questions {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model DiscoveryResponses {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String
  answer    String?
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @db.Uuid
}

model Contact {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String? @unique

  conversationIds    String[]             @default([])
  discoveryResponses DiscoveryResponses[]

  booking Booking[]

  domain        Domain?        @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId      String?        @db.Uuid
  Campaign      Campaign?      @relation(fields: [campaignId], references: [id])
  campaignId    String?        @db.Uuid
  conversations Conversation[]
}

model Conversation {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live         Boolean       @default(false)
  customerLive Boolean       @default(false)
  messages     ChatMessage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?  @db.Uuid

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model ChatMessage {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message        String
  role           Role?
  seen           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversationId String?       @db.Uuid
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Booking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime
  createdAt DateTime @default(now())

  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?  @db.Uuid

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model Campaign {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String?
  content      String? // is this userd anywhere?
  contacts     Contact[]
  emailBatches EmailBatch[]
  createdAt    DateTime     @default(now())

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.Uuid
}

model EmailBatch {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  count     Int      @default(0)
  createdAt DateTime @default(now())

  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String?   @db.Uuid
}

enum Role {
  user
  bot
  assistant
}
